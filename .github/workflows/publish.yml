name: 🚀 Publish ModulaR API

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for current package.json version)'
        required: false
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        type: choice
        options:
          - production
          - staging
        default: production
      dry_run:
        description: 'Dry run only (no actual publishing)'
        required: false
        type: boolean
        default: false

env:
  BUN_VERSION: '1.2.19'
  NODE_VERSION: '20'

jobs:
  validate:
    name: 🔍 Validate & Test Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-info.outputs.version }}
      name: ${{ steps.package-info.outputs.name }}
      should-publish: ${{ steps.package-info.outputs.should-publish }}
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better context
        
      - name: ⚡ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: 📦 Install dependencies
        run: |
          echo "📥 Installing dependencies with Bun..."
          bun install --frozen-lockfile
          echo "✅ Dependencies installed successfully"
          
      - name: 🧹 Clean previous builds
        run: |
          echo "🧹 Cleaning previous builds..."
          bun run clean
          echo "✅ Clean completed"
          
      - name: 🔨 Build package
        run: |
          echo "🔨 Building package..."
          bun run build
          echo "✅ Build completed successfully"
          
          echo "📁 Build output:"
          ls -la dist/
          
      - name: 🧪 Run tests (if available)
        run: |
          if bun run test --help >/dev/null 2>&1; then
            echo "🧪 Running tests..."
            bun run test
            echo "✅ Tests passed"
          else
            echo "ℹ️ No test script found, skipping tests"
          fi
        continue-on-error: false
        
      - name: 📋 Validate package structure
        run: |
          echo "📋 Validating package structure..."
          bun run publish:dry
          echo "✅ Package validation passed"
          
          echo ""
          echo "📊 Package size analysis:"
          bun run publish:check
          
      - name: 🏃 Run benchmarks (optional)
        run: |
          if [ -f "benchmark.js" ]; then
            echo "🏃 Running performance benchmarks..."
            timeout 240s bun run benchmark || echo "⚠️ Benchmark timeout or error (non-critical)"
          else
            echo "ℹ️ No benchmark script found, skipping benchmarks"
          fi
        continue-on-error: true
        
      - name: 📝 Extract package info
        id: package-info
        run: |
          VERSION=$(bun -p "require('./package.json').version")
          NAME=$(bun -p "require('./package.json').name")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          
          # Check if this version is already published
          if npm view "$NAME@$VERSION" version >/dev/null 2>&1; then
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "⚠️ Version $VERSION already exists on NPM"
          else
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "✅ Version $VERSION is new and ready for publishing"
          fi
          
          echo "📦 Package: $NAME@$VERSION"
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.package-info.outputs.version }}
          path: dist/
          retention-days: 7

  publish:
    name: 🚀 Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-publish == 'true' && github.event.inputs.dry_run != 'true'
    permissions:
      contents: read
      id-token: write # Required for npm provenance
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/
          
      - name: 📦 Install dependencies
        run: |
          echo "📥 Installing dependencies..."
          bun install --frozen-lockfile
          echo "✅ Dependencies installed"
          
      - name: 🏷️ Update version (if specified)
        if: github.event.inputs.version != ''
        run: |
          echo "🏷️ Updating version to ${{ github.event.inputs.version }}..."
          bun -p "
            const pkg = require('./package.json');
            pkg.version = '${{ github.event.inputs.version }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          echo "✅ Updated version to ${{ github.event.inputs.version }}"
          
      - name: 🔍 Final package verification
        run: |
          echo "🔍 Final package verification:"
          echo ""
          echo "📄 Package version:"
          FINAL_VERSION=$(bun -p "require('./package.json').version")
          echo "Version: $FINAL_VERSION"
          
          echo ""
          echo "📁 Build verification:"
          ls -la dist/
          
          echo ""
          echo "📋 Package contents check:"
          bun run publish:check
          
          echo ""
          echo "🔐 Publishing with provenance enabled"
          
      - name: 🌍 Publish to NPM
        run: |
          echo "🚀 Publishing ${{ needs.validate.outputs.name }} to NPM..."
          
          # Verify NPM auth
          npm whoami
          
          # Publish with provenance
          npm publish --access public --provenance
          
          echo "✅ Successfully published to NPM!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: 📢 Post-publish verification
        run: |
          echo "🕐 Waiting for package to propagate on NPM..."
          sleep 45
          
          echo "🔍 Verifying published package:"
          PACKAGE_INFO=$(npm view ${{ needs.validate.outputs.name }} --json)
          
          echo "$PACKAGE_INFO" | bun -p "
            const data = JSON.parse(require('fs').readFileSync(0, 'utf8'));
            console.log('✅ Package verification successful:');
            console.log('   📦 Name:', data.name);
            console.log('   🏷️  Version:', data.version);
            console.log('   📝 Description:', data.description);
            console.log('   📅 Published:', new Date(data.time[data.version]).toISOString());
            console.log('   📊 Size:', data.dist?.unpackedSize ? (data.dist.unpackedSize / 1024).toFixed(1) + 'KB' : 'Unknown');
            console.log('   🔗 NPM URL: https://www.npmjs.com/package/' + data.name);
          " || echo "⚠️ Package verification failed (may take time to propagate)"

  post-publish:
    name: 📢 Post-Publish Actions
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: always() && (needs.publish.result == 'success' || github.event.inputs.dry_run == 'true')
    
    steps:
      - name: 🎉 Success notification
        if: needs.publish.result == 'success' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🎉 Successfully published ${{ needs.validate.outputs.name }}@${{ needs.validate.outputs.version }}!"
          echo ""
          echo "📦 Package Information:"
          echo "   📛 Name: ${{ needs.validate.outputs.name }}"
          echo "   🏷️  Version: ${{ needs.validate.outputs.version }}"
          echo "   🌍 Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "   📡 Registry: https://registry.npmjs.org"
          echo ""
          echo "📥 Installation Commands:"
          echo "   bun add ${{ needs.validate.outputs.name }}"
          echo "   npm install ${{ needs.validate.outputs.name }}"
          echo "   yarn add ${{ needs.validate.outputs.name }}"
          echo ""
          echo "🔗 Links:"
          echo "   📦 NPM Package: https://www.npmjs.com/package/${{ needs.validate.outputs.name }}"
          echo "   📚 Documentation: https://github.com/Lukseh/modular-api#readme"
          echo "   🐛 Issues: https://github.com/Lukseh/modular-api/issues"
          
      - name: 🔍 Dry run summary
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 Dry Run Completed Successfully!"
          echo ""
          echo "✅ Package ${{ needs.validate.outputs.name }}@${{ needs.validate.outputs.version }} is ready for publishing"
          echo "📋 All validation checks passed"
          echo "🚀 Ready for production deployment"
          echo ""
          echo "To publish for real, run this workflow again with 'Dry run only' unchecked"
          
      - name: ❌ Publish failure notification
        if: needs.publish.result == 'failure'
        run: |
          echo "❌ Publishing failed for ${{ needs.validate.outputs.name }}@${{ needs.validate.outputs.version }}"
          echo ""
          echo "🔍 Please check the logs above for error details"
          echo "🛠️  Common fixes:"
          echo "   - Verify NPM_TOKEN secret is correctly set"
          echo "   - Check if version already exists on NPM"
          echo "   - Ensure package.json is valid"
          echo "   - Verify build completed successfully"
          
      - name: ⚠️ Already published notification  
        if: needs.validate.outputs.should-publish == 'false'
        run: |
          echo "⚠️ Version ${{ needs.validate.outputs.version }} already exists on NPM"
          echo ""
          echo "💡 To publish a new version:"
          echo "   1. Update version in package.json"
          echo "   2. Create a new release, or"
          echo "   3. Run this workflow manually with a new version number"
          echo ""
          echo "🔗 Current package: https://www.npmjs.com/package/${{ needs.validate.outputs.name }}"
